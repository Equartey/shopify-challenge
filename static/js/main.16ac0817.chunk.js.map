{"version":3,"sources":["search.jsx","resultItems.jsx","results.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","Header","h1","_templateObject2","SearchBar","input","_templateObject3","SearchWrap","div","_templateObject4","StyledSearch","section","_templateObject5","Search","handleKeyPress","ev","key","_this","props","runQuery","react_default","a","createElement","onChange","this","updateQuery","onKeyPress","onClick","xmlns","viewBox","d","React","PureComponent","Description","resultItems_templateObject","Title","resultItems_templateObject2","Result","resultItems_templateObject3","Star","resultItems_templateObject4","favorites","ResultItems","unicode","e","document","innerHTML","childNodes","length","nodeValue","results","map","result","count","favCount","find","fav","body","title","isFavoriteList","undefined","id","concat","FavoriteResult","dangerouslySetInnerHTML","__html","HtmlDecode","Favorites","results_templateObject","QueryResults","results_templateObject2","StyledResults","results_templateObject3","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","remove","isFavorited","prevArry","toConsumableArray","indexOf","splice","setState","newFavorite","assign","newArray","slice","enoughFavorties","resultItems_ResultItems","bind","resultData","Component","StyledApp","App_templateObject","App","query","data","fetchData","_this2","fetch","then","res","json","catch","error","console","filter","keywords","toLowerCase","includes","target","value","search_Search","results_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16ac0817.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  background-color: #4a9363;\n  border: 0;\n  box-shadow: 0;\n  cursor: pointer;\n  fill: #fff;\n  margin-left: 15px;\n  padding: 2px;\n  width: 50px;\n  transform: scaleX(-1);\n\n  :hover {\n    opacity: 0.9;\n  }\n  :focus {\n    outline: #4a9363 auto 5px;\n  }\n`;\nconst Header = styled.h1`\n  background: linear-gradient(to right, #2e598f, #43866c);\n  color: #fff;\n  font-size: 3em;\n  margin: 0;\n  padding: 1em 0;\n  text-align: center;\n`;\nconst SearchBar = styled.input`\n  border: 1px solid #888;\n  flex: 1 1 auto;\n  font-size: 2em;\n  padding-left: 0.5em;\n  width: calc(100% - 65px);\n  \n  :focus {\n    border: 1px solid #4a9363;\n    outline: #4a9363 auto 5px;\n  }\n`;\nconst SearchWrap = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  padding: 15px;\n  width: 100%;\n`;\nconst StyledSearch = styled.section`\n  width: 100%;\n`;\n\nexport default class Search extends React.PureComponent {\n  // handles key presses in input box\n  handleKeyPress = ev => {\n    // only run query on enter key\n    if (ev.key === \"Enter\") {\n      this.props.runQuery();\n    }\n  };\n\n  render() {\n    return (\n      <StyledSearch>\n        <Header>Toronto Waste Lookup</Header>\n        <SearchWrap>\n          <SearchBar\n            onChange={this.props.updateQuery}\n            onKeyPress={this.handleKeyPress}\n          />\n          <Button onClick={this.props.runQuery}>\n            {/* SVG courtesy of Ionicons */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path d=\"M443.5 420.2L336.7 312.4c20.9-26.2 33.5-59.4 33.5-95.5 0-84.5-68.5-153-153.1-153S64 132.5 64 217s68.5 153 153.1 153c36.6 0 70.1-12.8 96.5-34.2l106.1 107.1c3.2 3.4 7.6 5.1 11.9 5.1 4.1 0 8.2-1.5 11.3-4.5 6.6-6.3 6.8-16.7.6-23.3zm-226.4-83.1c-32.1 0-62.3-12.5-85-35.2-22.7-22.7-35.2-52.9-35.2-84.9 0-32.1 12.5-62.3 35.2-84.9 22.7-22.7 52.9-35.2 85-35.2s62.3 12.5 85 35.2c22.7 22.7 35.2 52.9 35.2 84.9 0 32.1-12.5 62.3-35.2 84.9-22.7 22.7-52.9 35.2-85 35.2z\" />\n            </svg>\n          </Button>\n        </SearchWrap>\n      </StyledSearch>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport styled from \"styled-components\";\nconst Description = styled.div`\n  flex: 1 1 50%;\n`;\nconst Title = styled.div`\n  flex: 1 1 50%;\n`;\nconst Result = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  margin: 25px 0;\n  padding: 0 15px;\n\n  :first-of-type {\n    margin-top: 0;\n  }\n\n  ul {\n    margin: 0;\n    padding-left: 20px;\n  }\n\n  li {\n    margin-bottom: 10px;\n  }\n`;\nconst Star = styled.div`\n  cursor: pointer;\n  fill: ${props => (props.favorites ? \"#4a9363\" : \"#aaa\")}\n  height: 20px;\n  margin-right: 10px;\n  width: 20px;\n\n  :hover {\n    fill: #4a9363;\n  }\n`;\n\nexport default class ResultItems extends PureComponent {\n  // ResultMarkup(result, isFavoriteList) {\n\n  /**\n   * Returns html unicode as a string\n   *\n   * @param {unicode} - unicode - The unicode to parse.\n   * @return {html} - string - The HTML string to render.\n   */\n  HtmlDecode(unicode) {\n    var e = document.createElement(\"div\");\n    e.innerHTML = unicode;\n    return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\n  }\n\n  render() {\n    // creates markup for a result item\n    const createResult = result => {\n      // handles favorite object.\n      if (result.count) {\n        result = result.result;\n      }\n\n      // Finds a specific favorite in the list and saves if fav count > 1\n      let favCount = this.props.favorites.find(fav => {\n        if (\n          fav.result.body === result.body &&\n          fav.result.title === result.title\n        ) {\n          return fav.count > 1;\n        }\n        return null;\n      });\n\n      // Do not render favorite item when fav count less than 2\n      if (this.props.isFavoriteList && favCount === undefined) return;\n\n      return (\n        <Result\n          id={result.id}\n          key={`${result.title}${result.body}`} // Uses result title & body as a 'cheap' unquie key\n        >\n          <Star\n            favorites={favCount !== undefined}\n            onClick={() =>\n              this.props.FavoriteResult(this, result, this.props.isFavoriteList)\n            }\n          >\n            {/* SVG courtesy of Ionicons */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path d=\"M463 192H315.9L271.2 58.6C269 52.1 262.9 48 256 48s-13 4.1-15.2 10.6L196.1 192H48c-8.8 0-16 7.2-16 16 0 .9.1 1.9.3 2.7.2 3.5 1.8 7.4 6.7 11.3l120.9 85.2-46.4 134.9c-2.3 6.5 0 13.8 5.5 18 2.9 2.1 5.6 3.9 9 3.9 3.3 0 7.2-1.7 10-3.6l118-84.1 118 84.1c2.8 2 6.7 3.6 10 3.6 3.4 0 6.1-1.7 8.9-3.9 5.6-4.2 7.8-11.4 5.5-18L352 307.2l119.9-86 2.9-2.5c2.6-2.8 5.2-6.6 5.2-10.7 0-8.8-8.2-16-17-16z\" />\n            </svg>\n          </Star>\n          <Title>{result.title}</Title>\n          <Description\n            dangerouslySetInnerHTML={{\n              __html: this.HtmlDecode(result.body)\n            }}\n          />\n        </Result>\n      );\n    };\n\n    // returns the markup for a result entry\n    return this.props.results.map(createResult);\n  }\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport ResultItems from \"./resultItems\";\n\nconst Favorites = styled.div`\n  background: #f8fefa;\n  margin-top: auto;\n  min-height: 200px;\n  padding: 1em 15px;\n  h3 {\n    color: #4a9363;\n    font-size: 2em;\n    margin: 0;\n    margin-bottom: 15px;\n    padding: 0 15px;\n  }\n`;\n\nconst QueryResults = styled.div`\n  padding-top: 5px;\n`;\nconst StyledResults = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: calc(100% - 15em);\n`;\n\nexport default class Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      favorites: []\n    };\n  }\n\n  // handles favoriting results\n  FavoriteResult(e, result, remove) {\n    // look for exisiting favorited result\n    const isFavorited = this.state.favorites.find(\n      fav =>\n        fav.result.body === result.body && fav.result.title === result.title\n    );\n\n    // create a new favorite if it doesn't exist or remove from list\n    //\n    if (isFavorited && remove) {\n      //\n      // removes favorite from list\n\n      // save array to preserve state array's immutability\n      let prevArry = [...this.state.favorites];\n\n      // save index of current favorite\n      let indexOf = prevArry.indexOf(isFavorited);\n\n      // remove index from favorites list\n      prevArry.splice(indexOf, 1);\n\n      // save new favorites array\n      this.setState({\n        favorites: [...prevArry]\n      });\n    } else if (isFavorited && isFavorited.count >= 1) {\n      //\n      // Increments favorite count\n\n      // save array to preserve state array's immutability\n      let prevArry = [...this.state.favorites];\n\n      // construct a new object | add one to count\n      const newFavorite = Object.assign({}, isFavorited, {\n        count: isFavorited.count + 1\n      });\n\n      // save index of current favorite\n      let indexOf = prevArry.indexOf(isFavorited);\n\n      // prepend array until index | insert new object to existing index | append indexs after new\n      const newArray = [\n        ...prevArry.slice(0, indexOf),\n        newFavorite,\n        ...prevArry.slice(indexOf + 1)\n      ];\n\n      // store new array in state\n      this.setState({ favorites: [...newArray] });\n    } else if (!isFavorited) {\n      // create and store a new favorite with count of 1\n      const newFavorite = { count: 1, result };\n      this.setState({ favorites: [...this.state.favorites, newFavorite] });\n    }\n  }\n\n  /**\n   * Returns result for display\n   *\n   * @param {JSON} - result - The unicode to parse.\n   * @return {array} - array - Array containing result components.\n   */\n\n  render() {\n    // check to see if favorites over 1 exist\n    const enoughFavorties = this.state.favorites.find(fav => fav.count > 1);\n\n    return (\n      <StyledResults>\n        <QueryResults>\n          <ResultItems\n            favorites={this.state.favorites}\n            FavoriteResult={this.FavoriteResult.bind(this)}\n            results={this.props.resultData}\n          />\n        </QueryResults>\n        <Favorites>\n          <h3>Favorites</h3>\n          {/* renders favorites when there are favorites */}\n          {enoughFavorties && (\n            <ResultItems\n              favorites={this.state.favorites}\n              FavoriteResult={this.FavoriteResult.bind(this)}\n              results={this.state.favorites}\n              isFavoriteList={true}\n            />\n          )}\n        </Favorites>\n      </StyledResults>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Search from \"./search\";\nimport Results from \"./results\";\nimport styled from \"styled-components\";\n\nconst StyledApp = styled.section`\n  height: 100%;\n  width: 100%;\n`;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      query: \"\",\n      resultData: [],\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData(); // GET data on start\n  }\n\n  // Fetch data and save store\n  fetchData() {\n    // construct url\n    const URL = `https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR`;\n\n    /*\n      I do not love this solution as it only grabs 1000 entries and there could be more. \n      To save resources, ideally the solution should pass the search query as a parameter to the API.\n      I throughly researched ODATA, REST API, JSON API, and other paradigms without any luck.  \n      I could not find sufficent documentation to use a to impelment this.\n      And given the vauge challenge description, I could see either solution fit.\n    */\n    const PARAMS = `?limit=1000`;\n\n    // GET from url\n    fetch(`${URL}${PARAMS}`)\n      .then(res => res.json()) // convert to json\n      .then(json => this.setState({ data: json })) // save data for filtering later\n      .catch(error => console.error(error)); // log errors\n  }\n\n  runQuery() {\n    if (this.state.query === \"\") return; // don't run an empty query\n\n    // save results for displaying\n    this.setState(state => {\n      // filter data array based on keywords\n      return {\n        resultData: state.data.filter(data =>\n          data.keywords.toLowerCase().includes(state.query.toLowerCase())\n        )\n      };\n    });\n  }\n\n  // Store and update search string\n  updateQuery(ev) {\n    // store search value\n    this.setState({ query: ev.target.value });\n    // clear waste data\n    if (ev.target.value === \"\") this.setState({ resultData: [] });\n  }\n\n  render() {\n    return (\n      <StyledApp>\n        <Search\n          runQuery={this.runQuery.bind(this)}\n          updateQuery={this.updateQuery.bind(this)}\n        />\n        <Results resultData={this.state.resultData} />\n      </StyledApp>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}